/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package se.lu.scriptlognewui.scriptlog2;

import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.FontMetrics;
import java.awt.geom.Rectangle2D;
import java.io.IOException;
import java.io.InputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;

/**
 *
 * @author ling-jfr
 */
public class IncludedFontTester extends javax.swing.JInternalFrame {

    FontMetrics metrics;
    JTextArea jta;

    public IncludedFontTester(JTextArea jta) {
        initComponents();

        this.jta = jta;
        Font font = null;

        InputStream fontStream = getClass().getResourceAsStream("fonts/arial.ttf");
        //InputStream fontStream = getClass().getResourceAsStream("fonts/HARNGTON.TTF");
        try {
            font = Font.createFont(Font.TRUETYPE_FONT, fontStream);
        } catch (FontFormatException ex) {
            Logger.getLogger(IncludedFontTester.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(IncludedFontTester.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            //font = font.deriveFont(Font.PLAIN, 12);
            fontStream.close();
        } catch (IOException ex) {
            Logger.getLogger(IncludedFontTester.class.getName()).log(Level.SEVERE, null, ex);
        }

        StyleContext context = new StyleContext();
        StyledDocument document = jTextPane1.getStyledDocument();
        Style style = context.getStyle(StyleContext.DEFAULT_STYLE);
        StyleConstants.setLineSpacing(style, 1.5f);
        StyleConstants.setFontFamily(style, font.getFamily());
        StyleConstants.setFontSize(style, 12);
        int len = document.getLength();
        document.setParagraphAttributes(0, len, style, false);

        // get the font
        Font f = document.getFont(jTextPane1.getParagraphAttributes());
        metrics = new FontMetrics(f) {
        };

        DocumentFilter docF = new DocumentFilter() {
            @Override
            public void insertString(DocumentFilter.FilterBypass fb, int offset, String str, AttributeSet attr) throws BadLocationException {
                fb.insertString(offset, str, attr);
            }

            @Override
            public void remove(DocumentFilter.FilterBypass fb, int offset, int length) throws BadLocationException {
                fb.remove(offset, length);
            }

            @Override
            public void replace(DocumentFilter.FilterBypass fb, int offset, int length, String str, AttributeSet attr) throws BadLocationException {
                fb.replace(offset, length, str, attr);

                Rectangle2D bounds = metrics.getStringBounds(str, null);
                toMessage("Bounds: " + str + " " + bounds.toString()+"\n");

                //System.out.println("Bounds: " + str + " " + bounds.toString());

                //super.replace(fb, offset, length, str, attr);
            }
        };

        ((AbstractDocument) jTextPane1.getDocument()).setDocumentFilter(docF);


//        try {
//            Font registerFont = Font.createFont(Font.TRUETYPE_FONT, getClass().getClassLoader().getResource("bin/register.ttf").openStream());
//        } catch (FontFormatException ex) {
//            Logger.getLogger(IncludedFontTester.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (IOException ex) {
//            Logger.getLogger(IncludedFontTester.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        setTitle("IncludedFontTester");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setViewportView(jTextPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables

    private void toMessage(String string) {
        jta.append(string);
    }
}
